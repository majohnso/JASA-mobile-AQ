n <- seq(1, 1e6, 100)
length(n)
library(ggplot2)
theme_set(theme_bw(base_size=16))
qplot(n, 1/n, geom="line")
qplot(log(n), 1/n, geom="line")
qplot(log(n[-1]), 1/n[-1], geom="line")
n <- seq(100, 1e6, 100)
qplot(log(n), 1/n, geom="line", xlab = "Computational Cost (log(n))", ylab = "Uncertainty (1/n)")
qplot(log(n), 1/n, geom="line", xlab = "Computational Cost (log(n))", ylab = "Uncertainty (1/n)", size=2)
qplot(log(n), 1/n, geom="line", xlab = "Computational Cost (log(n))", ylab = "Uncertainty (1/n)", size=I(2))
qplot(log(n), 1/sqrt(n), geom="line", xlab = "Computational Cost (log(n))", ylab = "Uncertainty (1/sqrt(n))", size=I(2))
qplot(n, 1/sqrt(n), geom="line", xlab = "Computational Cost (log(n))", ylab = "Uncertainty (1/sqrt(n))", size=I(2))
qplot(log(n), 1/sqrt(n), geom="line", xlab = "Computational Cost (log(n))", ylab = "Uncertainty (1/sqrt(n))", size=I(2))
library(Rmpi)
mpi.universe.size()
nslaves <- 3
mpi.spawn.Rslaves(nslaves = nslaves)
n = 5
mpi.bcast.Robj2slave(n)
mpi.bcast.cmd(id <- mpi.comm.rank())
mpi.bcast.cmd(x <- rnorm(id))
mpi.remote.exec(ls(.GlobalEnv))
mpi.bcast.cmd(y <- 2 * x)
mpi.remote.exec(print(y))
objs <- as.list(c('x', 'n'))
# next command sends value of objs on _master_ as argument to rm
mpi.remote.exec(do.call, rm, objs)
# verify that 'n' is gone:
mpi.remote.exec(print(n))
# collect results back via send/recv
mpi.remote.exec(mpi.send.Robj(y, dest = 0, tag = 1))
results = list()
for(i in 1:(mpi.comm.size()-1)){
results[[i]] = mpi.recv.Robj(source = i, tag = 1)
}
print(results)
mpi.close.Rslaves()
mpi.quit()
system( "ls -ltr /Library/Frameworks/R.framework/Resources/lib")
N<- 5e3
for( N in c( 1:5)*1e3){
x<- matrix( runif( N*2), N,2)
temp <- exp( -rdist( x,x))
print(system.time( obj<- chol( temp)))
}
library(fields)
N<- 5e3
for( N in c( 1:5)*1e3){
x<- matrix( runif( N*2), N,2)
temp <- exp( -rdist( x,x))
print(system.time( obj<- chol( temp)))
}
N<- 5e3
for( N in c( 1:5)*1e3){
x<- matrix( runif( N*2), N,2)
temp <- exp( -rdist( x,x))
print(system.time( obj<- chol( temp)))
}
N<- 5e3
for( N in c( 1:5)*1e3){
x<- matrix( runif( N*2), N,2)
temp <- exp( -rdist( x,x))
print(system.time( obj<- chol( temp)))
}
library(fields)
N<- 5e3
for( N in c( 1:5)*1e3){
x<- matrix( runif( N*2), N,2)
temp <- exp( -rdist( x,x))
print(system.time( obj<- chol( temp)))
}
a <- dlm::bdiag(matrix(1,nc=3,nr=4), matrix(1, nc=3, nr=5))
a
a <- dlm::bdiag(matrix(1,nc=3,nr=4), matrix(1, nc=3, nr=5), matrix(1, nc=2, nr=4))
a
b <- matrix(rnorm(64), nc=8)
a%*%b
a%*%b%*%t(a)
times <- read.csv("~/Desktop/times.xlxs")
times <- readxl::("~/Desktop/times.xlxs")
?readx;
?readxl
?readxl
times <- readxl::read_excel("~/Desktop/times.xlxs")
times <- readxl::read_excel("~/Desktop/times.xlsx")
str(times)
times <- as.numeric(times)
times <- c(times)
times <- unlist(times)
b <- 500
m <- 1000
q.3 <- vector()
for(i in m){
q.3[i] <- quantile(sample(times, b, replace=FALSE))
}
q.3[i] <- quantile(sample(times, b, replace=FALSE), 0.03)
b <- 500
m <- 1000
q.3 <- vector()
for(i in m){
q.3[i] <- quantile(sample(times, b, replace=FALSE), 0.03)
}
b <- 500
m <- 1000
q.3 <- vector()
for(i in 1:m){
q.3[i] <- quantile(sample(times, b, replace=FALSE), 0.03)
cat("\r", i)
}
hist(q.3)
b <- 500
m <- 1000
q.3 <- vector()
for(i in 1:m){
q.3[i] <- quantile(sample(times, b, replace=FALSE), 0.01)
cat("\r", i)
}
hist(q.3)
b <- 500
m <- 1000
q.3 <- vector()
for(i in 1:m){
q.3[i] <- quantile(sample(times, b, replace=FALSE), 0.03)
cat("\r", i)
}
b <- 500
m <- 1000
qval = 0.3
q <- vector()
for(i in 1:m){
q[i] <- quantile(sample(times, b, replace=FALSE), qval)
cat("\r", i)
}
q.f <- quantile(times, qval)
crit.025 <- quantile(q, 0.025)
crit.975 <- quantile(q, 0.975)
z.star <- b*(q - q.f)
alpha <- 0.05
z.star <- b*(q - q.f)
crit.val <- quantile(z.star, probs = c(1 - alpha / 2, alpha / 2))
q.f - crit.val / n
n <- length(times)
q.f - crit.val / n
qval = 0.03
q <- vector()
for(i in 1:m){
q[i] <- quantile(sample(times, b, replace=FALSE), qval)
cat("\r", i)
}
q.f <- quantile(times, qval)
z.star <- b*(q - q.f)
crit.val <- quantile(z.star, probs = c(1 - alpha / 2, alpha / 2))
q.f - crit.val / n
hist(z.star)
qval = 0
q <- vector()
for(i in 1:m){
q[i] <- quantile(sample(times, b, replace=FALSE), qval)
cat("\r", i)
}
q.f <- quantile(times, qval)
z.star <- b*(q - q.f)
crit.val <- quantile(z.star, probs = c(1 - alpha / 2, alpha / 2))
q.f - crit.val / n
hist(z.star)
quantile(times, qval)
b*(q - q.f)
q.f
crit.val <- quantile(z.star, probs = c(1 - alpha / 2, alpha / 2))
hist(z.star)
q.f - crit.val / n
quantile(q, probs = c(1 - alpha / 2, alpha / 2))
crit.val
quantile(q, probs = c(alpha / 2, 1 - alpha / 2))
n <- length(times)
b <- 500
m <- 5000
alpha <- 0.05
qval = 0
q <- vector()
for(i in 1:m){
q[i] <- quantile(sample(times, b, replace=FALSE), qval)
cat("\r", i)
}
q.f <- quantile(times, qval)
z.star <- b*(q - q.f)
crit.val <- quantile(z.star, probs = c(1 - alpha / 2, alpha / 2))
hist(z.star)
q.f - crit.val / n
quantile(q, probs = c(alpha / 2, 1 - alpha / 2))
q.f
hist(q)
b <- 1000
m <- 5000
alpha <- 0.05
qval = 0
q <- vector()
for(i in 1:m){
q[i] <- quantile(sample(times, b, replace=FALSE), qval)
cat("\r", i)
}
q.f <- quantile(times, qval)
z.star <- b*(q - q.f)
crit.val <- quantile(z.star, probs = c(1 - alpha / 2, alpha / 2))
hist(z.star)
q.f - crit.val / n
quantile(q, probs = c(alpha / 2, 1 - alpha / 2))
hist(z.star)
qval = 0.03
q <- vector()
for(i in 1:m){
q[i] <- quantile(sample(times, b, replace=FALSE), qval)
cat("\r", i)
}
q.f <- quantile(times, qval)
z.star <- b*(q - q.f)
crit.val <- quantile(z.star, probs = c(1 - alpha / 2, alpha / 2))
hist(z.star)
q.f - crit.val / n
quantile(q, probs = c(alpha / 2, 1 - alpha / 2))
alpha <- 0.001
qval = 0.03
q <- vector()
for(i in 1:m){
q[i] <- quantile(sample(times, b, replace=FALSE), qval)
cat("\r", i)
}
q.f <- quantile(times, qval)
z.star <- b*(q - q.f)
crit.val <- quantile(z.star, probs = c(1 - alpha / 2, alpha / 2))
hist(z.star)
q.f - crit.val / n
quantile(q, probs = c(alpha / 2, 1 - alpha / 2))
qval = 0
q <- vector()
for(i in 1:m){
q[i] <- quantile(sample(times, b, replace=FALSE), qval)
cat("\r", i)
}
q.f <- quantile(times, qval)
z.star <- b*(q - q.f)
crit.val <- quantile(z.star, probs = c(1 - alpha / 2, alpha / 2))
hist(z.star)
q.f - crit.val / n
quantile(q, probs = c(alpha / 2, 1 - alpha / 2))
n <- length(times)
b <- 1000
m <- 5000
alpha <- 0.001
qval = 0
q <- vector()
for(i in 1:m){
q[i] <- quantile(sample(times, b, replace=FALSE), qval)
cat("\r", i)
}
q.f <- quantile(times, qval)
z.star <- b*(q - q.f)
crit.val <- quantile(z.star, probs = c(1 - alpha / 2, alpha / 2))
hist(z.star)
q.f - crit.val / n
quantile(q, probs = c(alpha / 2, 1 - alpha / 2))
length(times)
n <- length(times)
b <- 1000
m <- 5000
alpha <- 0.001
qval = 0.01
q <- vector()
for(i in 1:m){
q[i] <- quantile(sample(times, b, replace=FALSE), qval)
cat("\r", i)
}
q.f <- quantile(times, qval)
z.star <- b*(q - q.f)
crit.val <- quantile(z.star, probs = c(1 - alpha / 2, alpha / 2))
hist(z.star)
q.f - crit.val / n
quantile(q, probs = c(alpha / 2, 1 - alpha / 2))
qval = 0.0001
q <- vector()
for(i in 1:m){
q[i] <- quantile(sample(times, b, replace=FALSE), qval)
cat("\r", i)
}
q.f <- quantile(times, qval)
z.star <- b*(q - q.f)
crit.val <- quantile(z.star, probs = c(1 - alpha / 2, alpha / 2))
hist(z.star)
q.f - crit.val / n
quantile(q, probs = c(alpha / 2, 1 - alpha / 2))
q.f
qval = 0
q <- vector()
for(i in 1:m){
q[i] <- quantile(sample(times, b, replace=FALSE), qval)
cat("\r", i)
}
q.f <- quantile(times, qval)
z.star <- b*(q - q.f)
crit.val <- quantile(z.star, probs = c(1 - alpha / 2, alpha / 2))
hist(z.star)
q.f - crit.val / n
quantile(q, probs = c(alpha / 2, 1 - alpha / 2))
min(q)
q.f
setwd("~/Documents/GitHub")
setwd("~/Documents/GitHub/JASA-mobile-AQ")
setwd("~/Documents/GitHub/JASA-mobile-AQ/")
